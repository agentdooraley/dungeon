-----------------------------------------------------
-- Some useful custom functions from the community --
-----------------------------------------------------
import("ScarUtil.scar")
import("WXPScarUtil.scar")


-- Checks if a player is Human or CPU in MP games. Cpu_IsCpuPlayer does not suffice in MP games.
function Player_IsHuman( playerID )
	local name = Player_GetDisplayName(playerID)[1]
	if string.len(name) < 3 then return true end
	name = string.sub(name, -2)
	if(	name == " 1" or name == " 2" or name == " 3" or name == " 4"
	or name == " 5" or name == " 6" or name == " 7" or name == " 8") then
		return false
	else
		return true
	end
end

-- Counts the number of a player's COMPLETED buildings. NOTE: Not tested yet.
function Player_GetCompletedBuildingsCount(playerID)
	local count = 0
	local isDoneBuilding = function(egroupid, itemindex, entityID)
		if Entity_IsBuilding(entityID) and Entity_GetBuildingProgress(entityID) == 1.0 then
			count = count + 1
		end
	end
	EGroup_ForEach(Player_GetEntities(playerID), isDoneBuilding)
	return count
end

-- Upgrades all specifically-named Squads of an SGroup, with a certain Weapon Upgrade
function SGroup_UpgradeSquadsWithWeapon( sgroup, sqd_name, wpn_name, wpn_count )
	local function UpgradeWeapons(groupid, itemindex, itemid)
		if Squad_GetBlueprintName(itemid) == sqd_name then
			for i=1, wpn_count do
				Squad_UpgradeWeapon(itemid,wpn_name)
			end
		end
	end
	SGroup_ForEach( sgroup, UpgradeWeapons )
end


-- Upgrades all specifically-named Squads of an SGroup, with a certain Leader Type
-- Note1: You can add as many leaders as you want - the actual AE squad limit, does NOT limit the SCaR code!
-- Note2: Adding a leader that the squad does NOT have (invalid leader index - ldr_idx) results in a CTD!
function SGroup_AddSquadsWithLeaders( sgroup, sqd_name, ldr_idx, ldr_cnt )
	if ldr_cnt == nil then ldr_cnt = 1 end
	local function AddLeaders(groupid, itemindex, itemid)
		if Squad_GetBlueprintName(itemid) == sqd_name then
			for i=1, ldr_cnt do
				Squad_AddLeaderAtIndex(itemid,ldr_idx)
			end
		end
	end
	SGroup_ForEach( sgroup, AddLeaders )
end


-- Multiplies (divides) the health value of all squads of an sgroup by healthFraction (0,1).
function SGroup_MultiplyCurrentHealthBy( groupname, healthFraction )
	if healthFraction >= 1 or healthFraction <=0 then return end
	local modify_health = function(sgroupid, itemindex, squadID)
		local healthPercent = Squad_GetHealth(squadID)/Squad_GetHealthMax(squadID) + 0.01
		Squad_SetHealth(squadID, healthPercent*healthFraction)
	end
	SGroup_ForEach( groupname, modify_health )
end


-- The 12 vectors table, used for finding a valid spawnable position.
Community_Vectors12 = {{x=0,z=1}, {x=0.5,z=0.866}, {x=0.866,z=0.5}, {x=1,z=0}, {x=0.866,z=-0.5}, {x=0.5,z=-0.866},
		{x=0,z=-1}, {x=-0.5,z=-0.866}, {x=-0.866,z=-0.5}, {x=-1,z=0}, {x=-0.866,z=0.5}, {x=-0.5,z=0.866}}
-- Has a VERY good chance NOT TO spawn within lakes !!
-- The y comparison is 100% consistent for lakes, but in large seas, two consecutive positions may be in/out
-- Returns a valid position
function Community_Extended_SpawnablePositionSearch(initial_pos, entity_name, player_id, max_dist)
	local spwnpstn1 = World_Pos(0,10,0)
	local spwnpstn2 = World_Pos(0,10,0)
	local found, dstnc = false, 1
	if player_id == nil then
		for i=0, World_GetPlayerCount()-1 do
			local id = World_GetPlayerAt(i)
			if Player_IsAlive(id) then
				player_id = id
				break
			end
		end
	end
	if player_id == nil then return initial_pos end
	if entity_name == nil then entity_name = "space_marine_ability_building" end
	if max_dist == nil then max_dist = 20 end
	local entityID = Entity_Create(entity_name, player_id, initial_pos)
	repeat
		for i=1, 12 do
			spwnpstn2.x = initial_pos.x + (Community_Vectors12[i].x * dstnc)
			spwnpstn2.z = initial_pos.z + (Community_Vectors12[i].z * dstnc)
			spwnpstn1 = spwnpstn2
			spwnpstn2 = World_GetSpawnablePosition(spwnpstn2,entityID)
			if (spwnpstn1.x ~= spwnpstn2.x or spwnpstn1.z ~= spwnpstn2.z) and spwnpstn1.y ~= spwnpstn2.y then
				found = true
				break
			end
		end
		dstnc = dstnc + 2
		if dstnc>max_dist then
			Entity_Destroy(entityID)
			return World_GetSpawnablePosition(initial_pos,entityID)
		end
	until found
	Entity_Destroy(entityID)
	return spwnpstn2
end


-- Boolean, checks if squads exist near a position
function Community_DoSquadsExistNearPos(iPos, iProximity)
	SGroup_CreateIfNotFound("community_sg_temp_check")
	for idx = 0, World_GetPlayerCount()-1 do
		SGroup_Clear("community_sg_temp_check")
		Player_GetAllSquadsNearPos( World_GetPlayerAt(idx), "community_sg_temp_check", iPos, iProximity )
		if SGroup_Count("community_sg_temp_check") > 0 then
			return true
		end
	end
	return false
end


-- Boolean, checks if buildings exist near a position
function Community_DoBuildingsExistNearPos(iPos, iProximity)
	EGroup_CreateIfNotFound("community_eg_temp_check")
	for idx = 0, World_GetPlayerCount()-1 do
		EGroup_Clear("community_eg_temp_check")
		Player_GetAllEntitiesNearPos( World_GetPlayerAt(idx), "community_eg_temp_check", iPos, iProximity )
		if EGroup_Count("community_eg_temp_check") > 0 then
			return true
		end
	end
	return false
end


-- PROBLEMATIC!! Fix it.
--[[Check the Difficulty the player selected at the game lobby screen and adjust Difficulty accordingly]]--
function Cpu_GetMPDifficulty()
	local t_val = {3,8,10,12,14}
	local difs = {"easy", "standard", "hard", "harder", "insane"}
	local count = World_GetPlayerCount()-1
	local res,hum,humgath,gathered,rac,human
	for i = 0, count do
		local player = World_GetPlayerAt(i)
		if Player_IsHuman(player) then
			human = player
			if World_DoesRaceUseRequisition(Player_GetRace(player)) then
				res = RT_Requisition
				-- Tyranids start with Req +7, NOT +30!
				if Player_GetRaceName(player) == "tyranids_race" then
					hum = 7/30
				else
					hum = 1
				end
			else
				res = RT_Power
				hum = 0.5
			end
			humgath = (Stats_PlayerResGathered(Player_GetID(human), res))
			break
		end
	end
	for i = 0, count do
		local player = World_GetPlayerAt(i)
		if Player_GetID(player) ~= Player_GetID(human)
		and not Player_IsHuman(player) then
			if World_DoesRaceUseRequisition(Player_GetRace(player)) == true then
				res = RT_Requisition
				-- Tyranids start with Req +7, NOT +30!
				if Player_GetRaceName(player) == "tyranids_race" then
					rac = 7/30
				else
					rac = 1
				end
			else
				res = RT_Power
				rac = 2
			end
			gathered = (Stats_PlayerResGathered(Player_GetID(player), res))
			for j = 1, 5 do
				if math.ceil((gathered/humgath)*10*rac*hum) == t_val[j]
				or math.floor((gathered/humgath)*10*rac*hum)== t_val[j]  then
					return difs[j]
				end
			end
			break
		end
	end
	return nil
end


