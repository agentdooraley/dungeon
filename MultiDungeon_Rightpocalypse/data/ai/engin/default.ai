----------------------------------------------------------------------------------------------
-- default.lua
-- This file loads the default behaviour for AI
-- Edited by Aliaska_RuS
----------------------------------------------------------------------------------------------

import( 'Core/cpu_manager.ai' )

--globals
cpu_manager 		= nil
resource_module 	= nil
build_module 		= nil
military_module 	= nil
debug_display 		= nil

--for assertions
iCurrentPlayer = 1002
ai_assert = false

function DebugDisplay()

	if (cpu_manager.player_id ~= iCurrentPlayer) then
		return
        end
		
	dr_setautoclear("aidebug"..player_id, 0)

	--cpu_manager:DisplayStats()
	debug_display:DisplayStats()

end

function ClearScreen()
	dr_clear("aidebug"..player_id)
end

function AI_Think()	

--	ProfileAllBegin()

	--if something asserted, stop processing
	if not cpu_manager.cpu_player:DoUpdate() then
		return
	end
--        cpu_manager.cpu_player:DoUpdate()
	if( ai_assert == true ) then
		DebugDisplay()
		return
	end

	--reset aitraces
	tracing = {}
	cpu_manager.terrain_analyzer:Update()
	cpu_manager:Update()

	collectgarbage(0)

--	ProfileAllEnd()

--	DebugDisplay()

end

function UpdateStats()
--	profile_start("UpdateStats")
	
	cpu_manager.stats:Update()
	
--	profile_end("UpdateStats")
end

function UpdateManagersCPU()
        cpu_manager:UpdateManagers()
end

function ProfileAllBegin()
	
	T = {}
	debug.sethook (function (event)
	  local f = debug.getinfo(2, 'f').func
	  local e = T[f]
	  if e == nil then
		local x = debug.getinfo(2, 'nS')
		e = {name = x.name, line = x.linedefined, source = x.source, what = x.what,
					 time = 0, count = 0}
		T[f] = e
	  end
	  if event == 'call' then
		e.time = e.time - os.clock()
		e.count = e.count + 1
	  else
		e.time = e.time + os.clock()
	  end
	end, "c")
	
end

function ProfileAllEnd()
  
	debug.sethook(nil, "c")   -- cannot change `T' during traversal!
	aipushtrace("Start Profiling")
	for k,v in T do
		if v.count > 100 then
			
			aitrace( string.format( "%s | %s | %d | %s | %d | %f", tostring(v.name), tostring(v.what), v.line, v.source, v.count, v.time ) )
			
		end
	ends
	aipoptrace("Stop Profiling")
	
end

function garbage()
	--do garbage collection
	collectgarbage(0)
end

function chat()
local cpu = AI_GetCpuPlayerFromID( AI_GetPlayerID() )
cpu:NetSay(550001, false)
end

function think()
cpu_manager.cpu_player:Enable(true)
Rule_AddInterval(AI_Think, 0.2)
end


function InitializeAI()

    player_id = AI_GetPlayerID()

    cpu_manager = CpuManager( player_id )

    if cpu_manager:Initialize() then

        dbAssert( build_manager ~= nil )
        dbAssert( debug_display ~= nil )

        Rule_AddInterval(test, 0.24)
        Rule_AddInterval(UpdateStats, 5)

    else
        cpu_manager = nil
        print( "failed to load ai: "..player_id )
    end

    -- turn display on and off
    dr_setdisplay("aidebug"..player_id, 0.5)

end

InitializeAI()
