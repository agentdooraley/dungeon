----------------------------------------
-- File: 'chaoslordterminatortactic.ai'
-- Edited by Thudmeizer @ 28.02.2016
-- Edited by LarkinVB   @ 31.07.2005

class 'ChaosLordTerminatorTactic' (ChaosMarineInfantryTactic)

ChaosLordTerminator = {}

function ChaosLordTerminatorTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Chaos Lord Tactic")

	self.m_oTimedSpecialAbilities = Timer( ChaosLordTerminatorTactic.DoTimedSpecialAbilities, self, 7 )
end

function ChaosLordTerminatorTactic:AlwaysAttack()
	return true
end

-- Chaos Lord is allowed to retreat even directly after a jump
function ChaosLordTerminatorTactic:SetTarget( target, variant_type )

    self.variant_type = variant_type
    self.variant_type = variant_type
       if self.variant_type==Tactic.Variant.Vector then
    self.target = Vector3f(target)
       elseif self.variant_type==Tactic.Variant.SquadAI then
    self.target = target
       elseif self.variant_type==Tactic.Variant.BaseAI then
    self.target = target
       end



	
	self.m_iMoveDelay = 0
	self.last_jump = 0
end

-- Assassinate win condition -- never jump into combat
function ChaosLordTerminatorTactic:JumpAttack()

	if (not cpu_manager.assassinate) then
		Tactic.JumpAttack(self)
	end
end

function ChaosLordTerminatorTactic:CanJumpAttached()
	return true
end

function ChaosLordTerminatorTactic:InitAbilities()

	-- Init ability ID's
	if (ChaosLordTerminator.strength_id == nil) then
		ChaosLordTerminator.strength_id = cpu_manager.stats:GetAbilityID( "chaos_daemon_strength" )	
	end
	if (ChaosLordTerminator.detector_id == nil) then
		ChaosLordTerminator.detector_id = cpu_manager.stats:GetAbilityID( "chaos_detector" )	
	end
	if (ChaosLordTerminator.bomb_id == nil) then
		ChaosLordTerminator.bomb_id = cpu_manager.stats:GetAbilityID( "chaos_commander_bomb" )
	end
	if (ChaosLordTerminator.run_id == nil) then
		ChaosLordTerminator.run_id = cpu_manager.stats:GetAbilityID( "all_run!" )	
	end
end

function ChaosLordTerminatorTactic:DoAbilities()

	Ability.DoAbility( self.squad_ai, ChaosLordTerminator.strength_id, Ability.Filters.IsInCombat )
	
	-- Try to place bomb
	Ability.DoAbilityPos(self.squad_ai, ChaosLordTerminator.bomb_id, Ability.Filters.CloseEnemy, 24)
	Ability.DoAbilityPos(self.squad_ai, ChaosLordTerminator.bomb_id, Ability.EntityFilters.CloseBaseEntityEnemy, 3)

	-- Run if safe
	if ((not self.squad_ai:IsInCombat() and self.squad_ai:IsInStateMove()) or self.stateID ~= Tactic.StateID.NoState) then

		-- If I am safe I can run
		if (self.squad_ai:CanDoAbility( ChaosLordTerminator.run_id )) then
			self.squad_ai:DoSpecialAbility( ChaosLordTerminator.run_id )
		end
	end

	if (self.m_oTimedSpecialAbilities ~= nil) then
		self.m_oTimedSpecialAbilities:Call()
	else
		ChaosLordTerminatorTactic.DoTimedSpecialAbilities(self)
	end
end

function ChaosLordTerminatorTactic:DoTimedSpecialAbilities()

	-- Try to use detection ability
    if (self.squad_ai:CanDoAbility(ChaosLordTerminator.detector_id)) then
    
    	-- Check for infiltrated enemy
        local oEnemy = Ability.Filters.CloseInfiltratedEnemy(self.squad_ai:GetPosition(), 35, 1)
        if (oEnemy ~= nil) then

        	-- Get distance to enemy unit
            local vSquadPos = self.squad_ai:GetPosition()
            local vEnemyPos = oEnemy:GetPosition()
            local iDistance = distance(vSquadPos, vEnemyPos)
            
            -- If target is too far away launch auspex in range
            local vTargetPos = Vector3f(vSquadPos)
            local iRange = self.squad_ai:GetAbilityRange(ChaosLordTerminator.detector_id)
            if (iDistance > iRange) then
                local fThrowFactor = iRange / iDistance
                vTargetPos.x = vTargetPos.x + (vEnemyPos.x - vSquadPos.x) * fThrowFactor
                vTargetPos.z = vTargetPos.z + (vEnemyPos.z - vSquadPos.z) * fThrowFactor
            else
                vTargetPos = Vector3f(vEnemyPos)
            end
            self.squad_ai:DoSpecialAbilityPos(ChaosLordTerminator.detector_id, vTargetPos)
        end
    end
end

function ChaosLordTerminatorTactic:Update()

	if (self:IsComplete()) then
		return
	end
	
	-- State machine
	if (not InfantryTactic.Update( self )) then
		return
	end
		

	-- Check if we are in serious trouble
	self:EmergencyRetreat()
end
