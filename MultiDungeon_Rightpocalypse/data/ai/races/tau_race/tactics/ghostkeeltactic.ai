----------------------------------------
-- File: 'ghostkeeltactic.ai'
-- Edited by Gambit @ 13.09.2020

class 'GhostkeelTactic' (TauInfantryTactic)

Ghostkeel = {}

function GhostkeelTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("XV95 Ghostkeel Battlesuit Tactic")

	self.Ranged_Upgrade = math.random( 0, 1 )	  -- Choose one of the main weapons (addons 0 and 1)
	self.Shoulder_Upgrade = math.random( 2, 3 )	  -- Choose one of the shoulder weapons (addons 2 and 3)
	self.m_iStealthTime = g_iGMT
	self.lastAddonTry = g_iGMT
end


function GhostkeelTactic:AutoBuildAddOn( addonSlot )
	for e in self.squad_ai:GetEntities() do
		local buildChannel = build_manager:GetBuildChannelFromID(e:GetID())
		if buildChannel ~= nil then
			local addOnID = buildChannel:GetItemIDAt(BuildChannelAI.PQ_AddOn, addonSlot)
			if (buildChannel:IsBuilding() == 0 and buildChannel:CanAddToQueue(BuildChannelAI.PQ_AddOn, addOnID) == BuildChannelAI.CANBUILD_Ok) then
				buildChannel:BuildAddOn(addOnID)
				return
			end
		end
	end
	return
end


function GhostkeelTactic:InitAbilities()

	-- Init ability ID's
	if Ghostkeel.shield == nil then
		Ghostkeel.shield = cpu_manager.stats:GetAbilityID( "tau_ghostkeel_personal_shield" )
		Ghostkeel.stealth = cpu_manager.stats:GetAbilityID( "tau_ghostkeel_stealth" )
		Ghostkeel.mark = cpu_manager.stats:GetAbilityID( "tau_ghostkeel_mark_squad" )
	end
end


function GhostkeelTactic:DoAbilities()

	local was_recently_hurt = self.squad_ai:WasRecentlyHurt()
	local health = self.squad_ai:GetHealthPercentage()
	local pos = self.squad_ai:GetPosition()
	local use_stealth = (was_recently_hurt and health < 0.35) or (health < 0.12 and cpu_manager.terrain_analyzer:HasThreat(pos, 40))

	if self.squad_ai:IsUsingAbility(Ghostkeel.stealth) and g_iGMT > self.m_iStealthTime + 6 then
		-- Stop stealth if not injured or we have enough health, to keep ranged weapons online
		if not use_stealth then
			self.squad_ai:DoSpecialAbility(Ghostkeel.stealth)
			self.m_iStealthTime = g_iGMT
		end
	elseif use_stealth and g_iGMT > self.m_iStealthTime + 6 then
		-- Enable stealth, to prevent further damage
		self.squad_ai:DoSpecialAbility(Ghostkeel.stealth)
		self.m_iStealthTime = g_iGMT
		self:EmergencyRetreat()
	end

	if self.squad_ai:IsInCombat() or was_recently_hurt then
		
		if self.squad_ai:CanDoAbility(Ghostkeel.shield) and was_recently_hurt then
			self.squad_ai:DoSpecialAbility(Ghostkeel.shield)
		end
		
		if self.squad_ai:CanDoAbility(Ghostkeel.mark) then
			-- Get closest squad in range
			local iRange = self.squad_ai:GetAbilityRange(Ghostkeel.mark)
			local oSquad = cpu_manager.cpu_player:FindFirstEnemy(pos, iRange, 1)
			if oSquad ~= nil then
				-- Get stats
				local oStats = oSquad:GetStats()
				if oStats ~= nil then
					-- Check unit type
					local eClass = oStats:GetClass()
					if (eClass == UnitStatsAI.UC_VehicleLow or eClass == UnitStatsAI.UC_VehicleMed or
						eClass == UnitStatsAI.UC_VehicleHigh or eClass == UnitStatsAI.UC_Commander or
						eClass == UnitStatsAI.UC_MonsterHigh or oSquad:GetNumTroopers() >= 4) then
						-- Use mark ability on squad
						self.squad_ai:DoSpecialAbilitySquad(Ghostkeel.mark, oSquad:GetSquad())
					end
				end	
			end
		end
	elseif health > 0.6 then
		-- Try a stealth attack!!!!
		if self:JumpAttackRanged() then
			if not self.squad_ai:IsUsingAbility(Ghostkeel.stealth) then
				self.squad_ai:DoSpecialAbility(Ghostkeel.stealth)
				self.m_iStealthTime = g_iGMT
			end
		end
	end

	-- Check to addon every 10+ secs
	if g_iGMT > self.lastAddonTry + 10 then
		self.lastAddonTry = g_iGMT
		-- Check available resources and health, before performing any upgrade
		local iReq = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Requisition )
		local iPow = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )
		if iReq > 200 and iPow > 200 and health > 0.35 then
			self:AutoBuildAddOn(self.Ranged_Upgrade)
			self:AutoBuildAddOn(self.Shoulder_Upgrade)
			self:AutoBuildAddOn(4);self:AutoBuildAddOn(5)
		end
	end

end


function GhostkeelTactic:JumpAttackRanged()

	-- Call standard method
	if (Tactic.JumpAttackRanged(self)) then
		return true
	end
	
	-- Get position and jump range
	local vPos = self.squad_ai:GetPosition()
	local iJumpRange = sqr(self.squad_ai:GetJumpDistance())
	
	-- Check if we can jump directly to the target
	local iClosestDistance = distance_sqr(vPos, self.target)
	local vTargetPos = nil
	if (iClosestDistance < iJumpRange) then
		vTargetPos = self.target
	else
	
		-- Get closest squad to target position
		for oSquad in military_manager:GetSquads() do
	
			-- Check if squad is valid
			if (oSquad:IsValid()) then
			
				-- Check distance
				local vPosition = oSquad:GetPosition()
				local iDistanceToMonolith = distance_sqr(vPosition, vPos)
				local iDistanceToTarget = distance_sqr(vPosition, self.target)
				if (iDistanceToMonolith < iJumpRange and iDistanceToTarget < iClosestDistance) then
					iClosestDistance = iDistanceToTarget
					vTargetPos = vPosition
				end
			end
		end
		
		-- Get closest building to target position
		for oBuilding in military_manager:GetBases() do
		
			-- Check if building is valid
			if (oBuilding:IsValid()) then
			
				-- Check distance
				local vPosition = oBuilding:GetPosition()
				local iDistanceToMonolith = distance_sqr(vPosition, vPos)
				local iDistanceToTarget = distance_sqr(vPosition, self.target)
				if (iDistanceToMonolith < iJumpRange and iDistanceToTarget < iClosestDistance) then
					iClosestDistance = iDistanceToTarget
					vTargetPos = vPosition
				end
			end
		end
	end
	
	-- Don't jump if we didn't find a target
	if (vTargetPos == nil or distance_sqr(vPos, vTargetPos) < sqr(50)) then
		return false
	end
	
	-- Try to jump to target
	for iLoop1 = 1, 5 do
	
		-- Create a jump position
		local vJumpPosition = vTargetPos
		vJumpPosition.x = vJumpPosition.x + math.random(-15, 15)
		vJumpPosition.z = vJumpPosition.z + math.random(-15, 15)
			
		-- Check if target position is in range and if unit is able to jump to target position
		local iDistance = distance_sqr(vJumpPosition, vPos)
		if (iDistance <= iJumpRange and self.squad_ai:CanJumpToPosition(vJumpPosition)) then
							
			-- Jump to position
			self.squad_ai:DoJump(vJumpPosition)
			self.last_jump = g_iGMT
			self.m_iLastGatherMove = self.last_jump - 10
			return true
		end
	end
	return false
end