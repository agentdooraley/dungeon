----------------------------------------
-- File: 'librariantactic.ai'
-- Edited by Thudmeizer @ 04.03.2016
-- Edited by LarkinVB   @ 15.08.2005

class 'LibrarianTactic' (SpaceMarineInfantryTactic)

Librarian = {}

function LibrarianTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Librarian Tactic")
end


function LibrarianTactic:AlwaysAttack()
	return true
end

function LibrarianTactic:IsDefender()
	return self:IsCommanderDefender()
end

-- Librarian is allowed to retreat even directly after a jump
function LibrarianTactic:SetTarget( target, variant_type )

    self.variant_type = variant_type
    self.variant_type = variant_type
       if self.variant_type==Tactic.Variant.Vector then
    self.target = Vector3f(target)
       elseif self.variant_type==Tactic.Variant.SquadAI then
    self.target = target
       elseif self.variant_type==Tactic.Variant.BaseAI then
    self.target = target
       end



	
	self.m_iMoveDelay = 0
	self.last_jump = 0
end

-- Arkhan 03.2006: Inherited method used by commanders which are able to jump with an attached squad
function LibrarianTactic:CanJumpAttached()
	return true
end

function LibrarianTactic:InitAbilities()

	-- Init ability ID's
	if (Librarian.smite == nil) then
		Librarian.smite = cpu_manager.stats:GetAbilityID( "marines_smite" )
	end
	if (Librarian.word == nil) then
		Librarian.word = cpu_manager.stats:GetAbilityID( "marines_word_of_emperer" )
	end
	if (Librarian.weaken_resolve == nil) then
		Librarian.weaken_resolve = cpu_manager.stats:GetAbilityID( "marines_weaken_resolve" )
	end
	if (Librarian.haste == nil) then
		Librarian.haste = cpu_manager.stats:GetAbilityID( "marines_haste" )
	end
	if (Librarian.cotms == nil) then
		Librarian.cotms = cpu_manager.stats:GetAbilityID( "marines_curse_machine_spirits" )
	end
	if (Librarian.inquisition == nil) then
		Librarian.inquisition = cpu_manager.stats:GetAbilityID( "marines_inquisition_librarian" )
	end
	if (Librarian.firebolt == nil) then
		Librarian.firebolt = cpu_manager.stats:GetAbilityID( "marines_firebolt" )
	end
	if (Librarian.mind_war == nil) then
		Librarian.mind_war = cpu_manager.stats:GetAbilityID( "marines_mind_war" )
	end
	if (Librarian.run_id == nil) then
		Librarian.run_id = cpu_manager.stats:GetAbilityID( "all_run!" )	
	end
end

function LibrarianTactic:DoAbilities()

	Ability.DoAbility( self.squad_ai, Librarian.word, Ability.Filters.IsInCombat )
	Ability.DoAbility( self.squad_ai, Librarian.haste, Ability.Filters.IsInCombat )
	
	-- We are dying, lower requisites for attacks
	if (self.squad_ai:WasRecentlyHurt() and self.squad_ai:GetHealthPercentage() < 0.4) then
		Ability.DoAbilityTarget( self.squad_ai, Librarian.smite, Ability.Filters.CloseInfantryEnemy, 4 )
		Ability.DoAbilityTarget( self.squad_ai, Librarian.weaken_resolve, Ability.Filters.CloseInfantryEnemy, 4 )
		Ability.DoAbilityTarget( self.squad_ai, Librarian.inquisition, Ability.Filters.CloseInfantryEnemy, 4 )
		Ability.DoAbilityTarget( self.squad_ai, Librarian.firebolt, Ability.Filters.CloseInfantryEnemy, 4 )
		Ability.DoAbilityTarget( self.squad_ai, Librarian.mind_war, Ability.Filters.CloseCommanderEnemy, 1 )
		Ability.DoAbilityTarget( self.squad_ai, Librarian.cotms, Ability.Filters.CloseVehicleEnemy, 1 )
	else
		Ability.DoAbilityTarget( self.squad_ai, Librarian.smite, Ability.Filters.CloseInfantryEnemy, 6 )
		Ability.DoAbilityTarget( self.squad_ai, Librarian.weaken_resolve, Ability.Filters.CloseInfantryEnemy, 6 )
		Ability.DoAbilityTarget( self.squad_ai, Librarian.inquisition, Ability.Filters.CloseInfantryEnemy, 8 )
		Ability.DoAbilityTarget( self.squad_ai, Librarian.firebolt, Ability.Filters.CloseInfantryEnemy, 8 )
		Ability.DoAbilityTarget( self.squad_ai, Librarian.mind_war, Ability.Filters.CloseCommanderEnemy, 1 )
		Ability.DoAbilityTarget( self.squad_ai, Librarian.cotms, Ability.Filters.CloseVehicleEnemy, 1 )
	end


	-- If I am safe I can run
	if (self.squad_ai:CanDoAbility( Librarian.run_id )) then
		self.squad_ai:DoSpecialAbility( Librarian.run_id )
	end

	
	
	if (self.squad_ai:CanDoAbility( Librarian.haste )) then
	self.squad_ai:DoSpecialAbility( Librarian.haste )
	end
end	



function LibrarianTactic:Update()

	if (self:IsComplete()) then
		return
	end
	
	-- State machine
	if (not InfantryTactic.Update(self)) then
		return
	end
	

	-- Check if we are in serious trouble
	self:EmergencyRetreat()
end
