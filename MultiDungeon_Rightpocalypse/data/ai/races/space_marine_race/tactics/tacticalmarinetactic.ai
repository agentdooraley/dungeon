----------------------------------------
-- File: 'tacticalmarinetactic.ai'
-- Edited by Thudmeizer @ 28.02.2016

class 'TacticalMarineTactic' (SpaceMarineInfantryTactic)

TacticalMarine = {}

function TacticalMarineTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Tactical Marine Tactic")
end

function TacticalMarineTactic:InitAbilities()

	if (TacticalMarine.flashbang_id == nil) then
		TacticalMarine.flashbang_id = cpu_manager.stats:GetAbilityID( "marines_flashbang_grenades" )	
	end

	if (TacticalMarine.frag_id == nil) then
		TacticalMarine.frag_id = cpu_manager.stats:GetAbilityID( "marines_frag_grenades" )	
	end

	if (TacticalMarine.inferno_id == nil) then
		TacticalMarine.inferno_id = cpu_manager.stats:GetAbilityID( "marines_inferno_grenades" )	
	end

	if (TacticalMarine.krak_id == nil) then
		TacticalMarine.krak_id = cpu_manager.stats:GetAbilityID( "marines_krak_grenades" )	
	end

	if (TacticalMarine.melta_id == nil) then
		TacticalMarine.melta_id = cpu_manager.stats:GetAbilityID( "marines_melta_bombs" )	
	end

	if (TacticalMarine.smoke_id == nil) then
		TacticalMarine.smoke_id = cpu_manager.stats:GetAbilityID( "marines_smoke_grenades" )	
	end

	if (TacticalMarine.sabotage_id == nil) then
		TacticalMarine.sabotage_id = cpu_manager.stats:GetAbilityID( "marines_sabotage" )	
	end

	if (TacticalMarine.rally_id == nil) then
		TacticalMarine.rally_id = cpu_manager.stats:GetAbilityID( "marines_rally" )	
	end

	if (TacticalMarine.run_id == nil) then
		TacticalMarine.run_id = cpu_manager.stats:GetAbilityID( "all_run!" )	
	end
end

function TacticalMarineTactic:DoAbilities()

        Ability.DoAbilityTarget( self.squad_ai, TacticalMarine.flashbang_id, Ability.Filters.CloseSquadEnemy, 4)
        Ability.DoAbilityTarget( self.squad_ai, TacticalMarine.frag_id, Ability.Filters.CloseSquadEnemy, 2)
        Ability.DoAbilityTarget( self.squad_ai, TacticalMarine.inferno_id, Ability.Filters.CloseSquadEnemy, 3)
        Ability.DoAbilityTarget( self.squad_ai, TacticalMarine.krak_id, Ability.Filters.CloseVehicleEnemy, 1)
        Ability.DoAbilityTarget( self.squad_ai, TacticalMarine.melta_id, Ability.Filters.CloseVehicleEnemy, 1)

	-- Use Sabotage on enemy vehicles or buildings
        Ability.DoAbilityTarget( self.squad_ai, TacticalMarine.sabotage_id, Ability.Filters.CloseVehicleEnemy, 1)
        Ability.DoAbilityTargetEntity( self.squad_ai, TacticalMarine.sabotage_id, Ability.EntityFilters.CloseBaseEntityEnemy, 1)

	-- Search a squad to launch smoke grenades
	local iRange = self.squad_ai:GetAbilityRange(TacticalMarine.smoke_id)
	local oUnit = Ability.Filters.CloseHurt(self.squad_ai:GetPosition(), iRange, 1)
	if (oUnit ~= nil and oUnit:IsInCombat() and cpu_manager:GetUnitStrength(oUnit) > 150) then
		self.squad_ai:DoSpecialAbilitySquad(TacticalMarine.smoke_id, oUnit:GetSquad())
	end

	if (self.squad_ai:IsBroken()) then
	
		-- Check if I can repair my morale
		if (self.squad_ai:CanDoAbility( TacticalMarine.rally_id )) then
			self.squad_ai:DoSpecialAbility( TacticalMarine.rally_id )
		end
	end

	-- Run if safe
	if ((not self.squad_ai:IsInCombat() and self.squad_ai:IsInStateMove()) or self.stateID ~= Tactic.StateID.NoState) then

		-- If I am safe I can run
		if (self.squad_ai:CanDoAbility( TacticalMarine.run_id )) then
			self.squad_ai:DoSpecialAbility( TacticalMarine.run_id )
		end
	end

	-- Call standard method
	SpaceMarineInfantryTactic.DoAbilities(self)
end

function TacticalMarineTactic:Upgrade()

	-- If I am broken, don't upgrade!
	if (self:IsAffectedByMorale() and self.squad_ai:IsBroken()) then
		return
	end
	
	-- If there are no ressources available, don't upgrade!
	if (not Tactic.Options.can_reinforce) then
		return
	end
  
	-- Only upgrade if not reinforcing
	if (not self.squad_ai:IsReinforcing()) then
	
		if (self.squad_ai:HasUpgradableTrooper()) then
			local class_type = cpu_manager:FindClosestEnemyPlayer():GetMajorityClassType()
			self.squad_ai:DoBestUpgrade( class_type )
		end
	end
end

function TacticalMarineTactic:Reinforce()

	if (not self.squad_ai:IsReinforcing() and g_iGMT >= 90) then
        	if (self.squad_ai:CanReinforce(true, 0)) then            
            		self.squad_ai:DoReinforce(true, 0)
       		elseif (self.squad_ai:CanReinforce(false, 0)) then
            		self.squad_ai:DoReinforce(false, 0)
		end
	end
end
